name: Build and Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version tag (e.g., v1.0.0)'
        required: true
        type: string
      prerelease:
        description: 'Is this a pre-release?'
        required: false
        type: boolean
        default: false

  push:
    tags:
      - 'v*'

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # macOS builds
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: dirverify-macos-arm64
            use_cross: false
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: dirverify-macos-x64
            use_cross: false
          
          # Linux builds
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            artifact_name: dirverify-linux-x64
            use_cross: true
          - os: ubuntu-latest
            target: aarch64-unknown-linux-musl
            artifact_name: dirverify-linux-arm64
            use_cross: true
          
          # Windows builds
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: dirverify-windows-x64.exe
            use_cross: false
          - os: windows-latest
            target: aarch64-pc-windows-msvc
            artifact_name: dirverify-windows-arm64.exe
            use_cross: false

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install cross
        if: matrix.use_cross == true
        run: |
          cargo install cross --git https://github.com/cross-rs/cross

      - name: Build
        run: |
          if [ "${{ matrix.use_cross }}" = "true" ]; then
            cross build --release --target ${{ matrix.target }}
          else
            cargo build --release --target ${{ matrix.target }}
          fi
        shell: bash

      - name: Package binary
        run: |
          cd target/${{ matrix.target }}/release
          
          # Handle Windows executables
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            7z a -tzip ${{ matrix.artifact_name }}.zip dirverify.exe
            mv ${{ matrix.artifact_name }}.zip ../../../
          else
            # For Unix systems, create tar.gz
            if [ "${{ matrix.os }}" = "macos-latest" ]; then
              # Ensure binary is executable and create tar
              chmod +x dirverify
              tar -czf ${{ matrix.artifact_name }}.tar.gz dirverify
            else
              tar -czf ${{ matrix.artifact_name }}.tar.gz dirverify
            fi
            mv ${{ matrix.artifact_name }}.tar.gz ../../../
          fi
        shell: bash

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.artifact_name }}
          path: |
            ${{ matrix.artifact_name }}.tar.gz
            ${{ matrix.artifact_name }}.zip

  # Create universal macOS binary
  macos-universal:
    name: Create macOS Universal Binary
    needs: build
    runs-on: macos-latest
    steps:
      - name: Download macOS artifacts
        uses: actions/download-artifact@v3
        with:
          name: dirverify-macos-arm64
      
      - name: Download macOS x64 artifact
        uses: actions/download-artifact@v3
        with:
          name: dirverify-macos-x64

      - name: Extract and create universal binary
        run: |
          tar -xzf dirverify-macos-arm64.tar.gz
          mv dirverify dirverify-arm64
          
          tar -xzf dirverify-macos-x64.tar.gz
          mv dirverify dirverify-x64
          
          lipo -create dirverify-arm64 dirverify-x64 -output dirverify
          chmod +x dirverify
          
          tar -czf dirverify-macos-universal.tar.gz dirverify

      - name: Upload universal binary
        uses: actions/upload-artifact@v3
        with:
          name: dirverify-macos-universal
          path: dirverify-macos-universal.tar.gz

  release:
    name: Create Release
    needs: [build, macos-universal]
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' || startsWith(github.ref, 'refs/tags/')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts

      - name: Create checksums
        run: |
          cd artifacts
          find . -name "*.tar.gz" -o -name "*.zip" | while read file; do
            mv "$file" ../
          done
          cd ..
          sha256sum *.tar.gz *.zip > checksums.sha256

      - name: Determine version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi

      - name: Create Release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ steps.version.outputs.version }}
          name: Release ${{ steps.version.outputs.version }}
          draft: false
          prerelease: ${{ github.event.inputs.prerelease || false }}
          artifacts: |
            *.tar.gz
            *.zip
            checksums.sha256
          body: |
            # dirverify ${{ steps.version.outputs.version }}
            
            ## Installation
            
            Download the appropriate binary for your platform:
            
            - **macOS**:
              - Apple Silicon (M1/M2): `dirverify-macos-arm64.tar.gz`
              - Intel: `dirverify-macos-x64.tar.gz`
              - Universal (both architectures): `dirverify-macos-universal.tar.gz`
            - **Linux**:
              - x64: `dirverify-linux-x64.tar.gz`
              - ARM64: `dirverify-linux-arm64.tar.gz`
            - **Windows**:
              - x64: `dirverify-windows-x64.exe.zip`
              - ARM64: `dirverify-windows-arm64.exe.zip`
            
            ## Usage
            
            ```bash
            # Generate checksums
            dirverify /path/to/source -o checksums.json
            
            # Verify checksums
            dirverify -c checksums.json -r /path/to/target
            ```
            
            ## Changelog
            
            See [CHANGELOG.md](https://github.com/${{ github.repository }}/blob/main/CHANGELOG.md) for details.
          token: ${{ secrets.GITHUB_TOKEN }}
